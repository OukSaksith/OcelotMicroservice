@page "/student"
@inject NavigationManager NavigationManager
@inject ApiService ApiService
@inject IJSRuntime JSRuntime
@using WebUI.Components.Models


<h3 class="d-flex justify-content-between align-items-center">
    <span>Student Management</span>
    <button class="btn btn-success" @onclick="NavigateToAddStudent" type="button">
        New
    </button>
</h3>

@if (students == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped table-bordered table-hover">
        <thead>
            <tr>
                <th>No</th>
                <th>Name</th>
                <th>Email</th>
                <th>Phone</th>
                <th>Address</th>
                <th>Date of Birth</th>
                <th>Enrollment Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < students.Count; i++)
            {
                var student = students[i];
                <tr>
                    <td>@(i + 1)</td>
                    <td>@student.Name</td>
                    <td>@student.Email</td>
                    <td>@student.PhoneNumber</td>
                    <td>@student.Address</td>
                    <td>@(student.DateOfBirth?.ToString("yyyy-MM-dd") ?? "-")</td>
                    <td>@(student.EnrollmentDate?.ToString("yyyy-MM-dd HH:mm:ss") ?? "-")</td>
                    <td>
                        <button class="btn btn-sm btn-primary me-1" @onclick="() => NavigateToUpdateStudent(student.Id)">Edit</button>
                        <button class="btn btn-sm btn-info me-1" @onclick="() => NavigateToViewStudent(student.Id)">View</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => NavigateToDeleteStudent(student.Id)">Delete</button>
                    </td>
                
                </tr>
            }
        </tbody>
    </table>
 

}

@code {

    private List<StudentModel> students;

    protected override async Task OnInitializedAsync()
    {
        students = await ApiService.GetStudentsAsync();
    }

    private void NavigateToAddStudent()
    {
        NavigationManager.NavigateTo("/student/add");
    }

    private void NavigateToUpdateStudent(int id)
    {

        NavigationManager.NavigateTo($"/student/update/{id}");
    }


    private void NavigateToViewStudent(int id)
    {

        NavigationManager.NavigateTo($"/student/view/{id}");
    }
    private async Task NavigateToDeleteStudent(int id)
    {

        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this?");
        if (confirmed)
        {
            await DeleteStudent(id);
        }
    }

    private async Task DeleteStudent(int id)
    {
        Console.WriteLine($"Deleted student with id: {id}");
        bool isDelete = await ApiService.DeleteStudentAsync(id);
        if(isDelete)
        {
            NavigationManager.NavigateTo("/student", forceLoad: true);
        }

     
    }


}
