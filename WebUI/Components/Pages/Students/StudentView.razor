@page "/student/view/{id:int}"
@using WebUI.Components.Models
@inject NavigationManager NavigationManager
@inject ApiService ApiService

<h3>Student Management - VIEW</h3>

<EditForm Model="student" OnValidSubmit="SubmitAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Name</label>
        <input readonly class="form-control" @bind="student.Name" />
    </div>
    <div class="mb-3">
        <label>Email</label>
        <input readonly class="form-control" @bind="student.Email" />
    </div>
    <div class="mb-3">
        <label>Phone</label>
        <input readonly class="form-control" @bind="student.PhoneNumber" />
    </div>
    <div class="mb-3">
        <label>Address</label>
        <input readonly class="form-control" @bind="student.Address" />
    </div>
    <div class="mb-3">
        <label>Date of Birth</label>
        <input readonly type="date" class="form-control" @bind="student.DateOfBirth" />
    </div>
    <div class="mb-3">
        <label>Enrollment Date</label>
        <input readonly type="datetime-local" class="form-control" @bind="student.EnrollmentDate" />
    </div>


    <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
</EditForm>

@code {
    [Parameter]
    public int id { get; set; }

    private StudentModel student = new();

    protected override async Task OnInitializedAsync()
    {
        var result = await ApiService.GetStudentsAsyncById(id);
        if (result != null)
        {
            student = result;
        }
    }
    private async Task SubmitAsync()
    {
        bool success = await ApiService.UpdateStudentAsync(student, id);
        if (success)
        {
            // message = "Student submitted successfully!";
            NavigationManager.NavigateTo("/student");
        }
        else
        {
            // message = "Failed to submit student.";
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/student"); // Cancel and go back
    }

}
