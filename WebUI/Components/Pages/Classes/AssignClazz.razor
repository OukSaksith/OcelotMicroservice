@page "/clazz/assign/{id:int}"
@using WebUI.Components.Models
@inject NavigationManager NavigationManager
@inject ApiService ApiService

<h3>Class Management - ASSIGNMENT</h3>

<EditForm Model="assignClazz" OnValidSubmit="AssignAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- Teacher selection -->
    <div class="mb-3">
        <label>Teacher</label>
        <select class="form-select" @bind="selectedTeacherId">
            <option value="">-- Select Teacher --</option>
            @foreach (var teacher in Teachers)
            {
                <option value="@teacher.Id.ToString()">@teacher.Name</option>
            }
        </select>
    </div>

    <!-- Students as checkboxes -->
    <div class="mb-3">
        <label>Students</label>
        @foreach (var student in Students)
        {
            <div class="form-check">
                <input class="form-check-input" type="checkbox"
                       id="student_@student.Id"
                       value="@student.Id"
                       checked="@assignClazz.StudentIds.Contains(student.Id)"
                       @onchange="e => OnStudentCheckboxChanged(student.Id, e.Value)">
                <label class="form-check-label" for="student_@student.Id">
                    @student.Name
                </label>
            </div>
        }
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
    <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
</EditForm>

@code {

    [Parameter] public int Id { get; set; }

    private AssignModel assignClazz = new AssignModel();
    private List<TeacherModel> Teachers = new();
    private List<StudentModel> Students = new();
    private string[] selectedStudentIds = Array.Empty<string>();
    private string? selectedTeacherId;

    private void OnStudentCheckboxChanged(int studentId, object? isChecked)
    {
        bool checkedValue = isChecked is bool b && b;

        if (checkedValue)
        {
            if (!assignClazz.StudentIds.Contains(studentId))
                assignClazz.StudentIds.Add(studentId);
        }
        else
        {
            assignClazz.StudentIds.Remove(studentId);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var classData = await ApiService.GetClazzesAsyncById(Id);

        assignClazz.StudentIds = classData.StudentIds ?? new List<int>();
        assignClazz.TeacherId = classData.TeacherId;

        Teachers = await ApiService.GetTeachersAsync();
        Students = await ApiService.GetStudentsAsync();

        selectedTeacherId = assignClazz.TeacherId?.ToString();
    }
    private async Task AssignAsync()
    {
        assignClazz.TeacherId = string.IsNullOrEmpty(selectedTeacherId)
           ? null
           : int.Parse(selectedTeacherId);

        bool success = await ApiService.AssignClazzAsync(assignClazz, Id);
        if (success)
        {
            NavigationManager.NavigateTo("/clazz", true);
        }
    }


    private void Cancel()
    {
        NavigationManager.NavigateTo("/clazz"); // Cancel and go back
    }
}
